type Query {
    users(query: queryUserInput!): [User!]!
}

type Mutation {
    createUser(data: createUserInput!): User!
    deleteUser(id: ID!): deleteUserPayload!
    deleteAllUsers: deleteAllUsersPayload!
}


type Subscription {
    user: UserSubscriptionPayload!
}




type deleteAllUsersPayload {
    state: String!
}

type deleteUserPayload {
    state: String!
}

input createUserInput {
    name: String!
    age: Int!
    department: String!
    FB: String
    IG: String
    birthday: String
    photo: String!
}

input queryUserInput {
    department: String
}

enum MutationType {
    CREATED
    DELETED
    UPDATED
}

""" sub not supported!
type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}
"""

type User {
    id: ID!
    name: String!
    age: Int!
    department: String!
    FB: String
    IG: String
    birthday: String
    popularity: Int!
    photo: String!
}

type UserSubscriptionPayload {
    mutation: MutationType!
    data: User!
}



